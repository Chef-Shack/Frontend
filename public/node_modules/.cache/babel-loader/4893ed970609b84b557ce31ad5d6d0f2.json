{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programming\\\\Web Development\\\\chefshack\\\\chef-shack-frontend\\\\src\\\\components\\\\pages\\\\UserAuthPage.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport \"../../css/user-auth-page-styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst UserAuthPage = props => {\n  _s();\n\n  const [username, setUsername] = useState('Username');\n  const [email, setEmail] = useState('Email');\n  const [password, setPassword] = useState('Password');\n  const [confirmPassword, setConfirmPassword] = useState('Confirm Password');\n  let headerText;\n  let buttonText;\n  let emailAndConfirmVisibilityClass;\n\n  if (props.type === \"login\") {\n    headerText = \"Login\";\n    buttonText = \"Login\";\n    emailAndConfirmVisibilityClass = \"invisible\";\n  } else if (props.type === \"signup\") {\n    headerText = \"Create Account\";\n    buttonText = \"Sign Up\";\n  }\n\n  function clearField(fieldValue, fieldFunction) {\n    //TODO: Make it so users cannot create an account with fields with \"Username\", \"Email\", \"Password\", and \"Confirm Password\"\n    let isDefaultField = false;\n\n    for (const fieldName of [\"Username\", \"Email\", \"Password\", \"Confirm Password\"]) {\n      if (fieldValue === fieldName) {\n        isDefaultField = true;\n        console.log(isDefaultField);\n      }\n    }\n\n    console.log(isDefaultField);\n\n    if (isDefaultField) {\n      fieldFunction('');\n    }\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    axios.post(\"http://localhost:8000/members/register_user\", {\n      username: username,\n      email: email,\n      password: password\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-auth-body-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-container\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"user-auth-form\",\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: headerText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"Username\",\n            value: username,\n            onChange: _ref => {\n              let {\n                target\n              } = _ref;\n              return setUsername(target.value);\n            },\n            onFocus: () => clearField(username, setUsername)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: emailAndConfirmVisibilityClass,\n            type: \"email\",\n            name: \"Email\",\n            value: email,\n            onChange: _ref2 => {\n              let {\n                target\n              } = _ref2;\n              return setEmail(target.value);\n            },\n            onFocus: () => clearField(email, setEmail)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"Password\",\n            value: password,\n            onChange: _ref3 => {\n              let {\n                target\n              } = _ref3;\n              return setPassword(target.value);\n            },\n            onFocus: () => clearField(password, setPassword)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: emailAndConfirmVisibilityClass,\n            type: \"text\",\n            name: \"ConfirmPassword\",\n            value: confirmPassword,\n            onChange: _ref4 => {\n              let {\n                target\n              } = _ref4;\n              return setConfirmPassword(target.value);\n            },\n            onFocus: () => clearField(confirmPassword, setConfirmPassword)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            href: \"recipes\",\n            className: \"custom-button\",\n            id: \"button\",\n            variant: \"outline-success\",\n            children: buttonText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(UserAuthPage, \"pPXxtuscjUH5rZ6ZCUMxX6ILRwU=\");\n\n_c = UserAuthPage;\nexport default UserAuthPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserAuthPage\");","map":{"version":3,"names":["useState","Button","UserAuthPage","props","username","setUsername","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","headerText","buttonText","emailAndConfirmVisibilityClass","type","clearField","fieldValue","fieldFunction","isDefaultField","fieldName","console","log","handleSubmit","event","preventDefault","axios","post","target","value"],"sources":["D:/Programming/Web Development/chefshack/chef-shack-frontend/src/components/pages/UserAuthPage.js"],"sourcesContent":["import {useState} from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport \"../../css/user-auth-page-styles.css\"\r\n\r\nconst UserAuthPage = (props) => {\r\n    const [username, setUsername] = useState('Username');\r\n    const [email, setEmail] = useState('Email');\r\n    const [password, setPassword] = useState('Password');\r\n    const [confirmPassword, setConfirmPassword] = useState('Confirm Password');\r\n\r\n    let headerText;\r\n    let buttonText;\r\n    let emailAndConfirmVisibilityClass;\r\n\r\n    if(props.type === \"login\") {\r\n        headerText = \"Login\"\r\n        buttonText = \"Login\"\r\n        emailAndConfirmVisibilityClass = \"invisible\"\r\n    } else if(props.type === \"signup\") {\r\n        headerText = \"Create Account\"\r\n        buttonText = \"Sign Up\"\r\n    }\r\n\r\n    function clearField(fieldValue, fieldFunction) {\r\n        //TODO: Make it so users cannot create an account with fields with \"Username\", \"Email\", \"Password\", and \"Confirm Password\"\r\n\r\n        let isDefaultField = false;\r\n\r\n        for(const fieldName of [\"Username\", \"Email\", \"Password\", \"Confirm Password\"]) {\r\n            if(fieldValue === fieldName) {\r\n                isDefaultField = true;\r\n                console.log(isDefaultField)\r\n            }\r\n        }\r\n\r\n        console.log(isDefaultField)\r\n\r\n        if(isDefaultField) {\r\n            fieldFunction('');\r\n        }\r\n    }\r\n\r\n    function handleSubmit(event) {\r\n        event.preventDefault();\r\n        axios.post(\"http://localhost:8000/members/register_user\", {\r\n            username: username,\r\n            email: email,\r\n            password: password\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"user-auth-body-content\">\r\n                <div className=\"form-container\">\r\n                    <form className=\"user-auth-form\" onSubmit={handleSubmit}>\r\n                        <h1>{headerText}</h1>\r\n                        <input type=\"text\" name=\"Username\" value={username} onChange={({ target }) => setUsername(target.value)} onFocus={() => clearField(username, setUsername)}></input>\r\n                        <input className={emailAndConfirmVisibilityClass} type=\"email\" name=\"Email\" value={email} onChange={({ target }) => setEmail(target.value)} onFocus={() => clearField(email, setEmail)}></input>\r\n                        <input type=\"text\" name=\"Password\" value={password} onChange={({ target }) => setPassword(target.value)} onFocus={() => clearField(password, setPassword)}></input>\r\n                        <input className={emailAndConfirmVisibilityClass} type=\"text\" name=\"ConfirmPassword\" value={confirmPassword} onChange={({ target }) => setConfirmPassword(target.value)} onFocus={() => clearField(confirmPassword, setConfirmPassword)}></input>\r\n\r\n                        <Button type=\"submit\" href=\"recipes\" className=\"custom-button\" id=\"button\" variant=\"outline-success\">{buttonText}</Button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UserAuthPage;"],"mappings":"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"},"metadata":{},"sourceType":"module"}